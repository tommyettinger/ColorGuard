apply plugin: "gwt"
apply plugin: "war"

gwt {
    gwtVersion = "$gwtFrameworkVersion" // Should match the version used for building the GWT backend. See gradle.properties.
    maxHeapSize = '1G' // Default 256m is not enough for the GWT compiler. GWT is HUNGRY.
    minHeapSize = '1G'

    src = files(file('src/main/java')) // Needs to be in front of "modules" below.
    modules 'color.guard.GdxDefinition'
    devModules 'color.guard.GdxDefinitionSuperdev'
    project.webAppDirName = 'webapp'

    compiler.strict = true
    compiler.disableCastChecking = true
}

import org.wisepersist.gradle.plugins.gwt.GwtSuperDev

def HttpFileServer server = null
def httpFilePort = 8080
task startHttpServer () {
    dependsOn draftCompileGwt
    String output = project.buildDir.path + "/gwt/draftOut"
    doLast {
        copy {
            from "webapp"
            into output
        }
        copy {
            from "war"
            into output
        }
        server = new SimpleHttpFileServerFactory().start(new File(output), httpFilePort)
        println "Server started in directory " + server.getContentRoot() + ", http://localhost:" + server.getPort() + "/index.html"
    }
}

dependencies {
    api project(':core')
    api "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
    api "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    api "com.github.SquidPony.SquidLib:squidlib-util:$squidLibVersion:sources"
    api "com.github.tommyettinger:regexodus:$regExodusVersion:sources"

}

task superDev(type: GwtSuperDev) {
    dependsOn startHttpServer
    doFirst {
        gwt.modules = gwt.devModules
    }
}

task dist(dependsOn: [clean, compileGwt]) {
    doLast {
        file("build/dist").mkdirs()
        copy {
            from "build/gwt/out"
            into "build/dist"
        }
        copy {
            from "webapp"
            into "build/dist"
        }
        copy {
            from "war"
            into "build/dist"
        }
    }
}
task addSource {
    doLast {
        sourceSets.main.compileClasspath += files(project(':core').sourceSets.main.allJava.srcDirs)

    }
}

tasks.compileGwt.dependsOn(addSource)
tasks.draftCompileGwt.dependsOn(addSource)

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/main/java/" ]
